# Import necessary libraries
import numpy as np
import pandas as pd
from tensorflow.keras.models import load_model
from sklearn.preprocessing import MinMaxScaler
import matplotlib.pyplot as plt

# Load the dataset
file_path = '/content/cleaned-data-51f54b.csv'  # Update with your file path
df = pd.read_csv(file_path)

# Preprocess the data: Convert 'Date' column to datetime format and set it as index
df['Date'] = pd.to_datetime(df['Date'], format='%m/%d/%Y')
df.set_index('Date', inplace=True)

# Define the lag interval (for example, 1-month)
lag_interval = 30  # Days (assuming you want to use a 1-month lag interval)

# Create lagged features for altimetry
lagged_df = pd.DataFrame({'altimetry': df['altimetry']})
lagged_df[f'waterlevel_lag{lag_interval}'] = lagged_df['altimetry'].shift(lag_interval)
data = lagged_df.dropna()  # Drop rows with NaN values due to lagging

# Define features (X) and target (y)
X = data[['altimetry', f'waterlevel_lag{lag_interval}']].values
y = data['altimetry'].values

# Normalize the features and target using MinMaxScaler
scaler_X = MinMaxScaler()
scaler_y = MinMaxScaler()
X_scaled = scaler_X.fit_transform(X)
y_scaled = scaler_y.fit_transform(y.reshape(-1, 1))

# Reshape X for the GRU model (3D tensor: [samples, time_steps, features])
X_scaled = X_scaled.reshape((X_scaled.shape[0], 1, X_scaled.shape[1]))

# Load the pre-trained BiGRU model (adjust the path if necessary)
bigru_model = load_model('/content/bivariate_gru_model.h5')

# Predict the water levels using the trained BiGRU model
predictions_scaled = bigru_model.predict(X_scaled)

# Inverse transform the predicted values to get them in the original scale
predictions = scaler_y.inverse_transform(predictions_scaled)

# Plot the predictions against the actual water levels
plt.figure(figsize=(10, 5))
plt.plot(df.index[-len(predictions):], y[-len(predictions):], label='Actual Water Levels')
plt.plot(df.index[-len(predictions):], predictions, label='Predicted Water Levels', linestyle='--')
plt.title('BiGRU Model - Predicted vs Actual Water Levels')
plt.xlabel('Date')
plt.ylabel('Altimetry Water Levels')
plt.legend()
plt.show()

# Calculate performance metrics (e.g., R2, MAE, RMSE)
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
mae = mean_absolute_error(y[-len(predictions):], predictions)
rmse = np.sqrt(mean_squared_error(y[-len(predictions):], predictions))
r2 = r2_score(y[-len(predictions):], predictions)

# Display the metrics
print(f"Performance Metrics:")
print(f"MAE: {mae:.4f}")
print(f"RMSE: {rmse:.4f}")
print(f"RÂ²: {r2:.4f}")
